generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("PROD_DATABASE_URL")
  // Use the directUrl for local development
  directUrl = env("DIRECT_DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  phone     String?  @default("")
  country   String?  @default("")
  wallpaper String?  @default("")
  avatar    String?  @default("")
  bio       String?  @default("")
  headline  String?  @default("")

  // Relationships
  followers   User[]      @relation("UserFollowers", map: "FK_User_Followers")
  following   User[]      @relation("UserFollowers", map: "FK_User_Following")
  posts       Post[]      @relation("UserPosts") // Relation for authored posts
  savedPosts  Post[]      @relation("UserSavedPosts") // Relation for saved posts
  communities Community[] @relation("CommunityMembers") // Communities the user is a member of
  adminOf     Community[] @relation("CommunityAdmins") // Communities the user administers
  comments    Comment[]
  likes       Like[]

  Community Community[]

  Post Post[] @relation("PostMentions")
}

model Community {
  id          String   @id @default(cuid())
  name        String
  description String
  avatar      String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  ownerId     String

  // Relationships
  owner   User   @relation(fields: [ownerId], references: [id])
  admins  User[] @relation("CommunityAdmins")
  members User[] @relation("CommunityMembers")
  posts   Post[] @relation("CommunityPosts")
}

model Post {
  id          String   @id @default(cuid())
  content     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  authorId    String
  communityId String?
  postMediaId String?

  // Relationships
  author    User       @relation("UserPosts", fields: [authorId], references: [id])
  community Community? @relation("CommunityPosts", fields: [communityId], references: [id])
  savedBy   User[]     @relation("UserSavedPosts")
  mentions  User[]     @relation("PostMentions")
  postMedia PostMedia? @relation(fields: [postMediaId], references: [id])
  comments  Comment[]
  likes     Like[]
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  authorId  String
  postId    String

  // Relationships
  author User   @relation(fields: [authorId], references: [id])
  post   Post   @relation(fields: [postId], references: [id])
  likes  Like[]
}

model Like {
  id        String  @id @default(cuid())
  authorId  String
  postId    String?
  commentId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  author  User     @relation(fields: [authorId], references: [id])
  post    Post?    @relation(fields: [postId], references: [id])
  comment Comment? @relation(fields: [commentId], references: [id])
}

model PostMedia {
  id        String   @id @default(cuid())
  urls      String[]
  type      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  posts Post[]
}
